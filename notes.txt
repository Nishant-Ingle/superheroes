# Features

1 Browse a list of superheroes -> Get all
  Search bar
2 View detailed information about each superhero -> Get sh api, cache
3 Add new superhero -> Post api
4 Update superhero -> put api
5 Update superhero only if you have editing rights -> rbac
6 Startup db fetch from API
* Team Formation
  7 Random team formation
  8 Manual team formation
    9 Recommendations of right panel based on balanced powers


Future additions:
  10 [Team] Compare teams and predict winner with explanation
  11 [Team] Fill remaining randomly
  12 [Team] What if we want to have a filtered random selection


Steps:

  1. DB Schema Design, help: chatgpt, document for hero attributes - d
  [Fast API]

  2. API design, help: chatgpt, doc for api(swagger) - d
  3. Comments - d
  4. Type update & annotations - d
     https://stackoverflow.com/questions/15853469/putting-current-class-as-return-type-annotation
  5. Error handling - d
  6. Logging - d
  7. Search API - d

  [React NextJS]
  8. UI - d
      - wireframes of pages - d
      - superhero get all page - d
      - superhero get details - d
      - superhero update - d
      - superhero create new - d
      - teams tab dummy text addition - d
      - auth/n page wireframe - d


  9. DB - d
  10. Caching - d

  11. Teams APIs - d
  12. Teams UI - d
  13. Containerize with Dockerfile: react, fast-api
  14. RBAC auth/z [Optional]
  15. Verify Everything, Improve Everything



# Marking

* Code Quality: Optimized, readable, commented code, type annotations
* Functionality: Handle all cases, error handling.
* UI Design: UI Wireframes, Bootstrap
* Doc: Readme, Swagger
* Comm: Script


# APIs

Get all superheroes - d
Get superhero - d
Add superhero - d
Update superhero - d


# Pending/Q&A

1. Multithreading
2. id function built-in
3. deepcopy of superhero list in python
4. Singleton in Python, metaclass
5. Async def
6. Private variable
7. Query params superhero_id
8. Pydantic
9. Class methods - superhero class from_dict
10. Optional
11. init.py
12. decorators
13. Logging to a file
14. If no image_url or image_url = null then ?
15. Cache code trim
16. CORS
17. Debounce Search
18. Context API, useEffect
19. Webpack
20. build dist dev
21. Properties in UI


# Script

1. UUID instead of ID
2. Sql injection prevention
3. User has to remember id and give id for new superhero
4. Superhero: Has id, name, (inte, pow, sp, str) and img url.
5. 20% cache, only app has access to db
6. Center focused UI
7. Meant for monitors
8. Image addition/update not supported


docker-compose
--------------

docker-compose build --no-cache
docker-compose up
docker-compose down
